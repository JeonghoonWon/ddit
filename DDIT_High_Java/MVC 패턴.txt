
mvc패턴 ==> Model, View, Controller
Model : 데이터 처리
View : 받아온 결과를 사용자에게 보여주는 용도
Controller : 사용자의 요청을 받아 그에 맞는 데이터를Model에서 가져와 View에 보여주는것

--------------------------------------------------------------------------------------------------

mvc패턴 ==> Model, View, Controller
Model : 데이터와 데이터를 구성하는 방법들을 통틀어서 Model 이라 한다
View : 데이터를 보여주는 영역
Controller : 사용자의 요청을 받아서 그것에 맞는 Model을 구성하고, 구성된 Model을 
View에 보내주는 역할을 수행한다.

추후, 유지보수하기가 좋다.
하지만 처음 작성시 불필요한 부분도 해둬야 하는 경우가 있다.
다 유지보수를 쉽게 하기 위한 것.


--------------------------------------------------------------------------------------------------
	MVC 패턴의 비지니스 로직을 처리하는 클래스
	1) VO, DTO => 데이터를 저장하는 역할만 하는 클래스
	( VO = Value Object, DTO =Data Transfer Object )

	2) DAO => SQL문을 DB 서버에 보내서 결과를 얻어오는 역할을 수행하는 클래스
	( DAO = Data Access Object )
	
	3) Service => 일을 수행하는 중간 관리자와 같은 역할을 수행하는 클래스
		      서비스는 일이 있으면 그 일에 필요한 Dao를 호출해서 일을 처리한 후
		      처리 결과를 Controller에게 전달하는 역할을 한다.
	
	4) Controller => 비지니스 로직이 시작되는 곳으로 일을 만들어서 Service에게 일을 
		          시키고 Service 가 보내온 처리 결과를 View에게 보내서 
		          화면등에 반영시키는 역할을 수행한다.

		Controller ---> Service ---> Dao ---> DB서버↘
						           |  
			Controller <--- Service <--- Dao← ↙	    
		           
	각 단계의 과정에서 다른 과정으로 진행할 때 사용되는 데이터는 
       	 보통 VO객체나 Collection객체를 이용한다.

-----------------------------------------------------------------------------------------------------
	작업을 시작할땐 DB서버 먼저 시작하는게 좋다.
	어떤 명령어를 사용할지 파악해두는게 좋다.
	
-----------------------------------------------------------------------------------------------------
	확장성을 위해 interface 를생성
	
	interface 를 구현한 어떠한 class 도 사용 할 수 있다.
	Oracle용이나 MySQL용 등 다양한 프로그램에서 모두 사용 할 수 있다. 








